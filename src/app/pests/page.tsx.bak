import fs from "fs";
import path from "path";
import Link from "next/link";

// Turn "americanhouse spider" or "baldfacedhornet" into "American House Spider" / "Bald-Faced Hornet"
function titleize(slug: string) {
  const lower = slug.toLowerCase();
  const suffixes = ["cockroach","spider","ant","beetle","bug","hornet","wasp","termite","moth","bat","mosquito","fly","tick","flea","weevil","bees","centipede","millipede","earwig","silverfish","cricket"];
  const tokens: string[] = [];
  // If it ends with a known suffix, split there
  const suf = suffixes.find(s => lower.endsWith(s));
  let root = lower;
  if (suf) { root = lower.slice(0, -suf.length); }
  // Break common roots into words
  const roots = root
    .replace(/[-_]+/g," ")
    .replace(/([a-z])([A-Z])/g,"$1 $2")
    .replace(/house/g,"house ")
    .replace(/baldfaced/g,"bald faced ")
    .replace(/acrobat/g,"acrobat ")
    .replace(/american/g,"american ")
    .replace(/argentine/g,"argentine ")
    .replace(/asian/g,"asian ")
    .replace(/\s+/g," ")
    .trim();
  if (roots) tokens.push(...roots.split(" "));
  if (suf) tokens.push(suf);
  // Title-case, with a few fixes
  const titled = tokens.filter(Boolean).map(w => {
    const fixes: Record<string,string> = {
      "bald":"Bald", "faced":"Faced", "bald faced":"Bald-Faced",
      "house":"House", "american":"American","argentine":"Argentine","asian":"Asian",
    };
    if (fixes[w]) return fixes[w];
    return w.charAt(0).toUpperCase() + w.slice(1);
  });
  // Join "Bald Faced" -> "Bald-Faced"
  return titled.join(" ").replace(/\bBald Faced\b/,"Bald-Faced");
}

function firstImageFor(slug: string): string | undefined {
  try {
    const imgDir = path.join(process.cwd(), "public", "pests");
    const files = fs.existsSync(imgDir) ? fs.readdirSync(imgDir) : [];
    const match = files.find(f => new RegExp(`^${slug}[._-]`,"i").test(f))
      ?? files.find(f => f.toLowerCase().includes(slug.toLowerCase()));
    return match ? `/pests/${match}` : undefined;
  } catch { return undefined; }
}

export default function PestLibrary() {
  const dir = path.join(process.cwd(), "src", "app", "pests");
  const pests = fs.readdirSync(dir)
    .filter(name => name !== "page.tsx" && name !== "[slug]" && fs.statSync(path.join(dir, name)).isDirectory())
    .sort((a,b) => titleize(a).localeCompare(titleize(b)));

  return (
    <main className="mx-auto max-w-6xl px-4 py-12">
      <h1 className="text-3xl font-bold mb-6">Pest Library</h1>
      <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-5">
        {pests.map((slug) => {
          const name = titleize(slug);
          const img = firstImageFor(slug);
          return (
            <Link key={slug} href={`/pests/${slug}`} className="group rounded-xl border overflow-hidden hover:shadow-sm transition">
              <div className="aspect-[16/9] bg-gray-50 flex items-center justify-center overflow-hidden">
                {img ? (
                  <img src={img} alt={name} className="h-full w-full object-cover group-hover:scale-[1.02] transition" />
                ) : (
                  <div className="text-gray-400 text-sm">No image</div>
                )}
              </div>
              <div className="p-4">
                <div className="font-semibold">{name}</div>
                <div className="text-xs text-gray-500">/pests/{slug}</div>
              </div>
            </Link>
          );
        })}
      </div>
    </main>
  );
}
